{"version":3,"file":"js/decidim_forms_admin.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;;;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AAAA;;AACA;AACA;AADA;AAGA;;;;;;AAGA;AACA;AACA;;;;;;;;;;;;;;;ACnCA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AAEA;AACA;;;;AAEA;AACA;AACA;;AAEA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AAJA;;AAOA;AACA;AACA;AAbA;AAeA;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AATA;AADA;;AAcA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AATA;AAYA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AADA;;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AADA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAPA;;AAgBA;AACA;;AACA;AACA;AACA;AACA;AACA;AANA;;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAfA;AAJA;;AAuBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAVA;AADA;;AAgBA;;AAEA;AACA;AADA;;AAIA;AACA;AADA;;AAIA;AACA;AACA;AAFA;;AAKA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAZA;;AAeA;AACA;AACA;;AAEA;AApCA;;AAuCA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AADA;AAIA;AACA;;AAEA;AACA;AADA;AAIA;AACA;AAtBA;;AAyBA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAbA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAVA;AADA;;AAgBA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AACA;AACA;AACA;AAjBA;;AAoBA;AAEA;AAlEA;;AAqEA;AACA;;AAEA;AACA;AACA;AACA;AANA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAvBA;AAyBA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AADA;AArCA;AAyCA;AACA;AACA;AA3CA;AA6CA;AACA;AACA;AACA;AAhDA;AAmDA;AAEA;AACA;AAEA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrbA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;;;;AAEA;AACA;AACA;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AElDA;AACA;AACA;AACA;AACA","sources":["webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-admin/app/packs/src/decidim/admin/field_dependent_inputs.component.js","webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/entrypoints/decidim_forms_admin.js","webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/src/decidim/forms/admin/auto_buttons_by_min_items.component.js","webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/src/decidim/forms/admin/auto_select_options_by_total_items.component.js","webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/src/decidim/forms/admin/auto_select_options_from_url.component.js","webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/src/decidim/forms/admin/collapsible_questions.js","webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/src/decidim/forms/admin/forms.js","webpack://app/../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/src/decidim/forms/admin/live_text_update.component.js","webpack://app/webpack/bootstrap","webpack://app/webpack/runtime/chunk loaded","webpack://app/webpack/runtime/compat get default export","webpack://app/webpack/runtime/define property getters","webpack://app/webpack/runtime/hasOwnProperty shorthand","webpack://app/webpack/runtime/make namespace object","webpack://app/webpack/runtime/node module decorator","webpack://app/webpack/runtime/jsonp chunk loading","webpack://app/webpack/before-startup","webpack://app/webpack/startup","webpack://app/webpack/after-startup"],"sourcesContent":["/* eslint-disable require-jsdoc */\nclass FieldDependentInputsComponent {\n  constructor(options = {}) {\n    this.controllerField = options.controllerField;\n    this.wrapperSelector = options.wrapperSelector;\n    this.dependentFieldsSelector = options.dependentFieldsSelector;\n    this.dependentInputSelector = options.dependentInputSelector;\n    this.enablingCondition = options.enablingCondition;\n    this._bindEvent();\n    this._run();\n  }\n\n  _run() {\n    const $controllerField = this.controllerField;\n    const $dependentFields = $controllerField.parents(this.wrapperSelector).find(this.dependentFieldsSelector);\n    const $dependentInputs = $dependentFields.find(this.dependentInputSelector);\n\n    if (this.enablingCondition($controllerField)) {\n      $dependentInputs.prop(\"disabled\", false);\n      $dependentFields.show();\n    } else {\n      $dependentInputs.prop(\"disabled\", true);\n      $dependentFields.hide();\n    }\n  }\n\n  _bindEvent() {\n    this.controllerField.on(\"change\", () => {\n      this._run();\n    });\n  }\n}\n\nexport default function createFieldDependentInputs(options) {\n  return new FieldDependentInputsComponent(options);\n}\n\n","import \"src/decidim/forms/admin/collapsible_questions\"\n\nimport createEditableForm from \"../src/decidim/forms/admin/forms\"\nwindow.Decidim.createEditableForm = createEditableForm\n","export default class AutoButtonsByMinItemsComponent {\n  constructor(options = {}) {\n    this.listSelector = options.listSelector;\n    this.minItems = options.minItems;\n    this.hideOnMinItemsOrLessSelector = options.hideOnMinItemsOrLessSelector;\n\n    this.run();\n  }\n\n  run() {\n    const $list = $(this.listSelector);\n    const $items = $list.find(this.hideOnMinItemsOrLessSelector);\n\n    if ($list.length <= this.minItems) {\n      $items.hide();\n    } else {\n      $items.show();\n    }\n  }\n}\n","export default class AutoSelectOptionsByTotalItemsComponent {\n  constructor(options = {}) {\n    this.wrapperSelector = options.wrapperSelector;\n    this.selectSelector = options.selectSelector;\n    this.listSelector = options.listSelector;\n  }\n\n  run() {\n    const $list = $(this.listSelector);\n    const $selectField = $list.parents(this.wrapperSelector).find(this.selectSelector);\n\n    $selectField.find(\"option\").slice(1).remove();\n\n    for (let idx = 2; idx <= $list.length; idx += 1) {\n      $(`<option value=\"${idx}\">${idx}</option>`).appendTo($selectField);\n    }\n  }\n}\n","export default class AutoSelectOptionsFromUrl {\n  constructor(options = {}) {\n    this.$source = options.source;\n    this.$select = options.select;\n    this.sourceToParams = options.sourceToParams;\n    this.run();\n  }\n\n  run() {\n    this.$source.on(\"change\", this._onSourceChange.bind(this));\n    this._onSourceChange();\n  }\n\n  _onSourceChange() {\n    const select = this.$select;\n    const params = this.sourceToParams(this.$source);\n    const url = this.$source.data(\"url\");\n\n    $.getJSON(url, params, function (data) {\n      select.find(\"option:not([value=''])\").remove();\n      const selectedValue = select.data(\"selected\");\n\n      data.forEach((option) => {\n        let optionElement = $(`<option value=\"${option.id}\">${option.body}</option>`).appendTo(select);\n        if (option.id === selectedValue) {\n          optionElement.attr(\"selected\", true);\n        }\n      });\n\n      if (selectedValue) {\n        select.val(selectedValue);\n      }\n    });\n  }\n}\n","(() => {\n  $(\"button.collapse-all\").on(\"click\", () => {\n    $(\".collapsible\").addClass(\"hide\");\n    $(\".question--collapse .icon-expand\").removeClass(\"hide\");\n    $(\".question--collapse .icon-collapse\").addClass(\"hide\");\n  });\n\n  $(\"button.expand-all\").on(\"click\", () => {\n    $(\".collapsible\").removeClass(\"hide\");\n    $(\".question--collapse .icon-expand\").addClass(\"hide\");\n    $(\".question--collapse .icon-collapse\").removeClass(\"hide\");\n  });\n})(window);\n","/* eslint-disable max-lines */\n/* eslint-disable require-jsdoc */\n\nimport AutoButtonsByMinItemsComponent from \"src/decidim/forms/admin/auto_buttons_by_min_items.component\"\nimport AutoSelectOptionsByTotalItemsComponent from \"src/decidim/forms/admin/auto_select_options_by_total_items.component\"\nimport AutoSelectOptionsFromUrl from \"src/decidim/forms/admin/auto_select_options_from_url.component\"\nimport createLiveTextUpdateComponent from \"src/decidim/forms/admin/live_text_update.component\"\nimport AutoButtonsByPositionComponent from \"src/decidim/admin/auto_buttons_by_position.component\"\nimport AutoLabelByPositionComponent from \"src/decidim/admin/auto_label_by_position.component\"\nimport createSortList from \"src/decidim/admin/sort_list.component\"\nimport createDynamicFields from \"src/decidim/admin/dynamic_fields.component\"\nimport createFieldDependentInputs from \"src/decidim/admin/field_dependent_inputs.component\"\nimport createQuillEditor from \"src/decidim/editor\"\n\nexport default function createEditableForm() {\n  const wrapperSelector = \".questionnaire-questions\";\n  const fieldSelector = \".questionnaire-question\";\n  const questionTypeSelector = \"select[name$=\\\\[question_type\\\\]]\";\n  const answerOptionFieldSelector = \".questionnaire-question-answer-option\";\n  const answerOptionsWrapperSelector = \".questionnaire-question-answer-options\";\n  const answerOptionRemoveFieldButtonSelector = \".remove-answer-option\";\n  const matrixRowFieldSelector = \".questionnaire-question-matrix-row\";\n  const matrixRowsWrapperSelector = \".questionnaire-question-matrix-rows\";\n  const matrixRowRemoveFieldButtonSelector = \".remove-matrix-row\";\n  const addMatrixRowButtonSelector = \".add-matrix-row\";\n  const maxChoicesWrapperSelector = \".questionnaire-question-max-choices\";\n\n  const displayConditionFieldSelector = \".questionnaire-question-display-condition\";\n  const displayConditionsWrapperSelector = \".questionnaire-question-display-conditions\";\n  const displayConditionRemoveFieldButtonSelector = \".remove-display-condition\";\n\n  const displayConditionQuestionSelector = \"select[name$=\\\\[decidim_condition_question_id\\\\]]\";\n  const displayConditionAnswerOptionSelector = \"select[name$=\\\\[decidim_answer_option_id\\\\]]\";\n  const displayConditionTypeSelector = \"select[name$=\\\\[condition_type\\\\]]\";\n  const deletedInputSelector = \"input[name$=\\\\[deleted\\\\]]\";\n\n  const displayConditionValueWrapperSelector = \".questionnaire-question-display-condition-value\";\n  const displayconditionAnswerOptionWrapperSelector = \".questionnaire-question-display-condition-answer-option\";\n\n  const addDisplayConditionButtonSelector = \".add-display-condition\";\n\n  const removeDisplayConditionsForFirstQuestion = () => {\n    $(fieldSelector).each((idx, el) => {\n      const $question = $(el);\n      if (idx) {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"false\");\n        $question.find(displayConditionsWrapperSelector).show();\n      }\n      else {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"true\");\n        $question.find(displayConditionsWrapperSelector).hide();\n      }\n    });\n  };\n\n  const autoButtonsByPosition = new AutoButtonsByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    hideOnFirstSelector: \".move-up-question\",\n    hideOnLastSelector: \".move-down-question\"\n  });\n\n  const autoLabelByPosition = new AutoLabelByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    labelSelector: \".card-title span:first\",\n    onPositionComputed: (el, idx) => {\n      $(el).find(\"input[name$=\\\\[position\\\\]]:not([name*=\\\\[matrix_rows\\\\]])\").val(idx);\n\n      autoButtonsByPosition.run();\n\n      removeDisplayConditionsForFirstQuestion();\n    }\n  });\n\n  const MULTIPLE_CHOICE_VALUES = [\"single_option\", \"multiple_option\", \"sorting\", \"matrix_single\", \"matrix_multiple\"];\n  const MATRIX_VALUES = [\"matrix_single\", \"matrix_multiple\"];\n\n  const createAutoMaxChoicesByNumberOfAnswerOptions = (fieldId) => {\n    return new AutoSelectOptionsByTotalItemsComponent({\n      wrapperSelector: fieldSelector,\n      selectSelector: `${maxChoicesWrapperSelector} select`,\n      listSelector: `#${fieldId} ${answerOptionsWrapperSelector} .questionnaire-question-answer-option:not(.hidden)`\n    })\n  };\n\n  const createAutoButtonsByMinItemsForAnswerOptions = (fieldId) => {\n    return new AutoButtonsByMinItemsComponent({\n      wrapperSelector: fieldSelector,\n      listSelector: `#${fieldId} ${answerOptionsWrapperSelector} .questionnaire-question-answer-option:not(.hidden)`,\n      minItems: 2,\n      hideOnMinItemsOrLessSelector: answerOptionRemoveFieldButtonSelector\n    })\n  };\n\n  const createAutoSelectOptionsFromUrl = ($field) => {\n    return new AutoSelectOptionsFromUrl({\n      source: $field.find(displayConditionQuestionSelector),\n      select: $field.find(displayConditionAnswerOptionSelector),\n      sourceToParams: ($element) => { return { id: $element.val() } }\n    })\n  };\n\n  const createSortableList = () => {\n    createSortList(\".questionnaire-questions-list:not(.published)\", {\n      handle: \".question-divider\",\n      placeholder: '<div style=\"border-style: dashed; border-color: #000\"></div>',\n      forcePlaceholderSize: true,\n      onSortUpdate: () => {\n        autoLabelByPosition.run();\n        autoButtonsByPosition.run();\n      }\n    });\n  };\n\n  const createDynamicQuestionTitle = (fieldId) => {\n    const targetSelector = `#${fieldId} .question-title-statement`;\n    const locale = $(targetSelector).data(\"locale\");\n    const maxLength = $(targetSelector).data(\"max-length\");\n    const omission = $(targetSelector).data(\"omission\");\n    const placeholder = $(targetSelector).data(\"placeholder\");\n\n    return createLiveTextUpdateComponent({\n      inputSelector: `#${fieldId} input[name$=\\\\[body_${locale}\\\\]]`,\n      targetSelector: targetSelector,\n      maxLength: maxLength,\n      omission: omission,\n      placeholder: placeholder\n    });\n  }\n\n  const createCollapsibleQuestion = ($target) => {\n    const $collapsible = $target.find(\".collapsible\");\n    if ($collapsible.length > 0) {\n      const collapsibleId = $collapsible.attr(\"id\").replace(\"-question-card\", \"\");\n      const toggleAttr = `${collapsibleId}-question-card button--collapse-question-${collapsibleId} button--expand-question-${collapsibleId}`;\n      $target.find(\".question--collapse\").data(\"toggle\", toggleAttr);\n    }\n  };\n\n  const createDynamicFieldsForAnswerOptions = (fieldId) => {\n    const autoButtons = createAutoButtonsByMinItemsForAnswerOptions(fieldId);\n    const autoSelectOptions = createAutoMaxChoicesByNumberOfAnswerOptions(fieldId);\n\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-answer-option-id\",\n      wrapperSelector: `#${fieldId} ${answerOptionsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-answer-options-list\",\n      fieldSelector: answerOptionFieldSelector,\n      addFieldButtonSelector: \".add-answer-option\",\n      fieldTemplateSelector: \".decidim-answer-option-template\",\n      removeFieldButtonSelector: answerOptionRemoveFieldButtonSelector,\n      onAddField: () => {\n        autoButtons.run();\n        autoSelectOptions.run();\n      },\n      onRemoveField: () => {\n        autoButtons.run();\n        autoSelectOptions.run();\n      }\n    });\n  };\n\n  const dynamicFieldsForAnswerOptions = {};\n\n  const createDynamicFieldsForMatrixRows = (fieldId) => {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-matrix-row-id\",\n      wrapperSelector: `#${fieldId} ${matrixRowsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-matrix-rows-list\",\n      fieldSelector: matrixRowFieldSelector,\n      addFieldButtonSelector: addMatrixRowButtonSelector,\n      fieldTemplateSelector: \".decidim-matrix-row-template\",\n      removeFieldButtonSelector: matrixRowRemoveFieldButtonSelector,\n      onAddField: () => {\n      },\n      onRemoveField: () => {\n      }\n    });\n  };\n\n  const dynamicFieldsForMatrixRows = {};\n\n  const isMultipleChoiceOption = (value) => {\n    return MULTIPLE_CHOICE_VALUES.indexOf(value) >= 0;\n  }\n\n  const isMatrix = (value) => {\n    return MATRIX_VALUES.indexOf(value) >= 0;\n  }\n\n  const getSelectedQuestionType = (select) => {\n    const selectedOption = select.options[select.selectedIndex];\n    return $(selectedOption).data(\"type\");\n  };\n\n  const onDisplayConditionQuestionChange = ($field) => {\n    const $questionSelector = $field.find(displayConditionQuestionSelector);\n    const selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n\n    const isMultiple = isMultipleChoiceOption(selectedQuestionType);\n\n    let conditionTypes = [\"answered\", \"not_answered\"];\n\n    if (isMultiple) {\n      conditionTypes.push(\"equal\");\n      conditionTypes.push(\"not_equal\");\n    }\n\n    conditionTypes.push(\"match\");\n\n    const $conditionTypeSelect = $field.find(displayConditionTypeSelector);\n\n    $conditionTypeSelect.find(\"option\").each((idx, option) => {\n      const $option = $(option);\n      const value = $option.val();\n\n      if (!value) {\n        return;\n      }\n\n      $option.show();\n\n      if (conditionTypes.indexOf(value) < 0) {\n        $option.hide();\n      }\n    });\n\n    if (conditionTypes.indexOf($conditionTypeSelect.val()) < 0) {\n      $conditionTypeSelect.val(conditionTypes[0]);\n    }\n\n    $conditionTypeSelect.trigger(\"change\");\n  };\n\n  const onDisplayConditionTypeChange = ($field) => {\n    const value = $field.find(displayConditionTypeSelector).val();\n    const $valueWrapper = $field.find(displayConditionValueWrapperSelector);\n    const $answerOptionWrapper = $field.find(displayconditionAnswerOptionWrapperSelector);\n\n    const $questionSelector = $field.find(displayConditionQuestionSelector);\n    const selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n\n    const isMultiple = isMultipleChoiceOption(selectedQuestionType);\n\n    if (value === \"match\") {\n      $valueWrapper.show();\n    }\n    else {\n      $valueWrapper.hide();\n    }\n\n    if (isMultiple && (value === \"not_equal\" || value === \"equal\")) {\n      $answerOptionWrapper.show();\n    }\n    else {\n      $answerOptionWrapper.hide();\n    }\n  };\n\n  const initializeDisplayConditionField = ($field) => {\n    const autoSelectByUrl = createAutoSelectOptionsFromUrl($field);\n    autoSelectByUrl.run();\n\n    $field.find(displayConditionQuestionSelector).on(\"change\", () => {\n      onDisplayConditionQuestionChange($field);\n    });\n\n    $field.find(displayConditionTypeSelector).on(\"change\", () => {\n      onDisplayConditionTypeChange($field);\n    });\n\n    onDisplayConditionTypeChange($field);\n    onDisplayConditionQuestionChange($field);\n  }\n\n  const createDynamicFieldsForDisplayConditions = (fieldId) => {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-display-condition-id\",\n      wrapperSelector: `#${fieldId} ${displayConditionsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-display-conditions-list\",\n      fieldSelector: displayConditionFieldSelector,\n      addFieldButtonSelector: addDisplayConditionButtonSelector,\n      removeFieldButtonSelector: displayConditionRemoveFieldButtonSelector,\n      onAddField: ($field) => {\n        initializeDisplayConditionField($field);\n      },\n      onRemoveField: () => {\n      }\n    });\n  };\n\n  const dynamicFieldsForDisplayConditions = {};\n\n  const setupInitialQuestionAttributes = ($target) => {\n    const fieldId = $target.attr(\"id\");\n    const $fieldQuestionTypeSelect = $target.find(questionTypeSelector);\n\n    createCollapsibleQuestion($target);\n    createDynamicQuestionTitle(fieldId);\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: answerOptionsWrapperSelector,\n      dependentInputSelector: `${answerOptionFieldSelector} input`,\n      enablingCondition: ($field) => {\n        return isMultipleChoiceOption($field.val());\n      }\n    });\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: maxChoicesWrapperSelector,\n      dependentInputSelector: \"select\",\n      enablingCondition: ($field) => {\n        return $field.val() === \"multiple_option\" || $field.val() === \"matrix_multiple\";\n      }\n    });\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: matrixRowsWrapperSelector,\n      dependentInputSelector: `${matrixRowFieldSelector} input`,\n      enablingCondition: ($field) => {\n        return isMatrix($field.val());\n      }\n    });\n\n    dynamicFieldsForAnswerOptions[fieldId] = createDynamicFieldsForAnswerOptions(fieldId);\n    dynamicFieldsForMatrixRows[fieldId] = createDynamicFieldsForMatrixRows(fieldId);\n    dynamicFieldsForDisplayConditions[fieldId] = createDynamicFieldsForDisplayConditions(fieldId);\n\n    const dynamicFieldsAnswerOptions = dynamicFieldsForAnswerOptions[fieldId];\n    const dynamicFieldsMatrixRows = dynamicFieldsForMatrixRows[fieldId];\n\n    const onQuestionTypeChange = () => {\n      if (isMultipleChoiceOption($fieldQuestionTypeSelect.val())) {\n        const nOptions = $fieldQuestionTypeSelect.parents(fieldSelector).find(answerOptionFieldSelector).length;\n\n        if (nOptions === 0) {\n          dynamicFieldsAnswerOptions._addField();\n          dynamicFieldsAnswerOptions._addField();\n        }\n      }\n\n      if (isMatrix($fieldQuestionTypeSelect.val())) {\n        const nRows = $fieldQuestionTypeSelect.parents(fieldSelector).find(matrixRowFieldSelector).length;\n\n        if (nRows === 0) {\n          dynamicFieldsMatrixRows._addField();\n          dynamicFieldsMatrixRows._addField();\n        }\n      }\n    };\n\n    $fieldQuestionTypeSelect.on(\"change\", onQuestionTypeChange);\n\n    onQuestionTypeChange();\n  }\n\n  const hideDeletedQuestion = ($target) => {\n    const inputDeleted = $target.find(\"input[name$=\\\\[deleted\\\\]]\").val();\n\n    if (inputDeleted === \"true\") {\n      $target.addClass(\"hidden\");\n      $target.hide();\n    }\n  }\n\n  createDynamicFields({\n    placeholderId: \"questionnaire-question-id\",\n    wrapperSelector: wrapperSelector,\n    containerSelector: \".questionnaire-questions-list\",\n    fieldSelector: fieldSelector,\n    addFieldButtonSelector: \".add-question\",\n    addSeparatorButtonSelector: \".add-separator\",\n    addTitleAndDescriptionButtonSelector: \".add-title-and-description\",\n    fieldTemplateSelector: \".decidim-question-template\",\n    separatorTemplateSelector: \".decidim-separator-template\",\n    TitleAndDescriptionTemplateSelector: \".decidim-title-and-description-template\",\n    removeFieldButtonSelector: \".remove-question\",\n    moveUpFieldButtonSelector: \".move-up-question\",\n    moveDownFieldButtonSelector: \".move-down-question\",\n    onAddField: ($field) => {\n      setupInitialQuestionAttributes($field);\n      createSortableList();\n\n      $field.find(\".editor-container\").each((idx, el) => {\n        createQuillEditor(el);\n      });\n\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onRemoveField: ($field) => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n\n      $field.find(answerOptionRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForAnswerOptions[$field.attr(\"id\")]._removeField(el);\n      });\n\n      $field.find(matrixRowRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForMatrixRows[$field.attr(\"id\")]._removeField(el);\n      });\n\n      $field.find(displayConditionRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForDisplayConditions[$field.attr(\"id\")]._removeField(el);\n      });\n    },\n    onMoveUpField: () => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onMoveDownField: () => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    }\n  });\n\n  createSortableList();\n\n  $(fieldSelector).each((idx, el) => {\n    const $target = $(el);\n\n    hideDeletedQuestion($target);\n    setupInitialQuestionAttributes($target);\n  });\n\n  $(displayConditionFieldSelector).each((idx, el) => {\n    const $field = $(el);\n    initializeDisplayConditionField($field)\n  });\n\n  autoLabelByPosition.run();\n  autoButtonsByPosition.run();\n}\n","/* eslint-disable require-jsdoc */\n\n/**\n * This component allows for an element's text value to be updated with the value\n * of an input whenever this input's value is changed.\n *\n * @param {object} options\n *\n * Available options:\n * {string} `inputSelector`:  The query selector to locate the input element\n * {string} `targetSelector`: The query selector to locate the target element\n * {number} `maxLength`: The maximum characters from the input value to be displayed in the target\n * {string} `omission`: The string used to shorten the value to the given maxLength (e.g. \"...\")\n * {string} `placeholder`: The string to be displayed in the target element when the input has no value\n */\nclass LiveTextUpdateComponent {\n  constructor(options = {}) {\n    this.inputSelector = options.inputSelector;\n    this.targetSelector = options.targetSelector;\n    this.maxLength = options.maxLength;\n    this.omission = options.omission;\n    this.placeholder = options.placeholder;\n    this._bindEvent();\n    this._run();\n  }\n\n  _run() {\n    const $input = $(this.inputSelector);\n    const $target = $(this.targetSelector);\n\n    let text = $input.val() || this.placeholder;\n\n    // truncate string\n    if (text.length > this.maxLength) {\n      text = text.substring(0, this.maxLength - this.omission.length) + this.omission;\n    }\n\n    $target.text(text);\n  }\n\n  _bindEvent() {\n    const $input = $(this.inputSelector);\n    $input.on(\"change\", this._run.bind(this));\n  }\n}\n\nexport default function createLiveTextUpdateComponent(options) {\n  return new LiveTextUpdateComponent(options);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"decidim_forms_admin\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkapp\"] = self[\"webpackChunkapp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_html5sortable_dist_html5sortable_es_js\",\"_rbenv_versions_2_7_5_lib_ruby_gems_2_7_0_bundler_gems_decidim-f920e99dc728_decidim-core_app_-8aee6a\",\"_rbenv_versions_2_7_5_lib_ruby_gems_2_7_0_bundler_gems_decidim-f920e99dc728_decidim-admin_app-16f163\"], function() { return __webpack_require__(\"../../../../.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/bundler/gems/decidim-f920e99dc728/decidim-forms/app/packs/entrypoints/decidim_forms_admin.js\"); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}