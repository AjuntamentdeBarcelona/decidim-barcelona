{"version":3,"file":"js/node_modules_codemirror-graphql_results_mode_js.chunk.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://app/./node_modules/codemirror-graphql/results/mode.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\nvar graphql_language_service_1 = require(\"graphql-language-service\");\ncodemirror_1.default.defineMode('graphql-results', function (config) {\n    var parser = graphql_language_service_1.onlineParser({\n        eatWhitespace: function (stream) { return stream.eatSpace(); },\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config: config,\n        startState: parser.startState,\n        token: parser.token,\n        indent: indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nfunction indent(state, textAfter) {\n    var _a, _b;\n    var levels = state.levels;\n    var level = !levels || levels.length === 0\n        ? state.indentLevel\n        : levels[levels.length - 1] -\n            (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\nvar LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nvar ParseRules = {\n    Document: [graphql_language_service_1.p('{'), graphql_language_service_1.list('Entry', graphql_language_service_1.p(',')), graphql_language_service_1.p('}')],\n    Entry: [graphql_language_service_1.t('String', 'def'), graphql_language_service_1.p(':'), 'Value'],\n    Value: function (token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [graphql_language_service_1.t('Number', 'number')],\n    StringValue: [graphql_language_service_1.t('String', 'string')],\n    BooleanValue: [graphql_language_service_1.t('Keyword', 'builtin')],\n    NullValue: [graphql_language_service_1.t('Keyword', 'keyword')],\n    ListValue: [graphql_language_service_1.p('['), graphql_language_service_1.list('Value', graphql_language_service_1.p(',')), graphql_language_service_1.p(']')],\n    ObjectValue: [graphql_language_service_1.p('{'), graphql_language_service_1.list('ObjectField', graphql_language_service_1.p(',')), graphql_language_service_1.p('}')],\n    ObjectField: [graphql_language_service_1.t('String', 'property'), graphql_language_service_1.p(':'), 'Value'],\n};\n//# sourceMappingURL=mode.js.map"],"names":[],"sourceRoot":""}